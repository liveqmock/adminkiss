<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.SystemLogMapper" >
  <resultMap id="BaseResultMap" type="model.SystemLog" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="auth_id" property="authId" jdbcType="BIGINT" />
    <result column="auth_name" property="authName" jdbcType="VARCHAR" />
    <result column="log_type" property="logType" jdbcType="TINYINT" />
    <result column="created_time" property="createdTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="model.SystemLog" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, auth_id, auth_name, log_type, created_time
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from system_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from system_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="model.SystemLog" >
    insert into system_log (id, auth_id, auth_name, 
      log_type, created_time, content
      )
    values (#{id,jdbcType=BIGINT}, #{authId,jdbcType=BIGINT}, #{authName,jdbcType=VARCHAR}, 
      #{logType,jdbcType=TINYINT}, #{createdTime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="model.SystemLog" >
    insert into system_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="authId != null" >
        auth_id,
      </if>
      <if test="authName != null" >
        auth_name,
      </if>
      <if test="logType != null" >
        log_type,
      </if>
      <if test="createdTime != null" >
        created_time,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="authId != null" >
        #{authId,jdbcType=BIGINT},
      </if>
      <if test="authName != null" >
        #{authName,jdbcType=VARCHAR},
      </if>
      <if test="logType != null" >
        #{logType,jdbcType=TINYINT},
      </if>
      <if test="createdTime != null" >
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="model.SystemLog" >
    update system_log
    <set >
      <if test="authId != null" >
        auth_id = #{authId,jdbcType=BIGINT},
      </if>
      <if test="authName != null" >
        auth_name = #{authName,jdbcType=VARCHAR},
      </if>
      <if test="logType != null" >
        log_type = #{logType,jdbcType=TINYINT},
      </if>
      <if test="createdTime != null" >
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="model.SystemLog" >
    update system_log
    set auth_id = #{authId,jdbcType=BIGINT},
      auth_name = #{authName,jdbcType=VARCHAR},
      log_type = #{logType,jdbcType=TINYINT},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.SystemLog" >
    update system_log
    set auth_id = #{authId,jdbcType=BIGINT},
      auth_name = #{authName,jdbcType=VARCHAR},
      log_type = #{logType,jdbcType=TINYINT},
      created_time = #{createdTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>