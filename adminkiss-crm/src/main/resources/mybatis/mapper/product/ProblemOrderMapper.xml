<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.ProblemOrderMapper" >
  <resultMap id="BaseResultMap" type="model.ProblemOrder" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="cid" property="cid" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="urgency" property="urgency" jdbcType="TINYINT" />
    <result column="auth_id" property="authId" jdbcType="BIGINT" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="start_time" property="startTime" jdbcType="TIMESTAMP" />
    <result column="end_time" property="endTime" jdbcType="TIMESTAMP" />
    <result column="created_time" property="createdTime" jdbcType="TIMESTAMP" />
    <result column="last_modified_time" property="lastModifiedTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="model.ProblemOrder" extends="BaseResultMap" >
    <result column="situation" property="situation" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, cid, name, phone, urgency, auth_id, status, start_time, end_time, created_time, 
    last_modified_time
  </sql>
  <sql id="Blob_Column_List" >
    situation
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from problem_order
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from problem_order
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="model.ProblemOrder" >
    insert into problem_order (id, cid, name, 
      phone, urgency, auth_id, 
      status, start_time, end_time, 
      created_time, last_modified_time, situation
      )
    values (#{id,jdbcType=BIGINT}, #{cid,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{urgency,jdbcType=TINYINT}, #{authId,jdbcType=BIGINT}, 
      #{status,jdbcType=TINYINT}, #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, 
      #{createdTime,jdbcType=TIMESTAMP}, #{lastModifiedTime,jdbcType=TIMESTAMP}, #{situation,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="model.ProblemOrder" >
    insert into problem_order
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="cid != null" >
        cid,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="urgency != null" >
        urgency,
      </if>
      <if test="authId != null" >
        auth_id,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="startTime != null" >
        start_time,
      </if>
      <if test="endTime != null" >
        end_time,
      </if>
      <if test="createdTime != null" >
        created_time,
      </if>
      <if test="lastModifiedTime != null" >
        last_modified_time,
      </if>
      <if test="situation != null" >
        situation,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="cid != null" >
        #{cid,jdbcType=BIGINT},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="urgency != null" >
        #{urgency,jdbcType=TINYINT},
      </if>
      <if test="authId != null" >
        #{authId,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="startTime != null" >
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createdTime != null" >
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastModifiedTime != null" >
        #{lastModifiedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="situation != null" >
        #{situation,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="model.ProblemOrder" >
    update problem_order
    <set >
      <if test="cid != null" >
        cid = #{cid,jdbcType=BIGINT},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="urgency != null" >
        urgency = #{urgency,jdbcType=TINYINT},
      </if>
      <if test="authId != null" >
        auth_id = #{authId,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="startTime != null" >
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createdTime != null" >
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastModifiedTime != null" >
        last_modified_time = #{lastModifiedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="situation != null" >
        situation = #{situation,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="model.ProblemOrder" >
    update problem_order
    set cid = #{cid,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      urgency = #{urgency,jdbcType=TINYINT},
      auth_id = #{authId,jdbcType=BIGINT},
      status = #{status,jdbcType=TINYINT},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      last_modified_time = #{lastModifiedTime,jdbcType=TIMESTAMP},
      situation = #{situation,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.ProblemOrder" >
    update problem_order
    set cid = #{cid,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      urgency = #{urgency,jdbcType=TINYINT},
      auth_id = #{authId,jdbcType=BIGINT},
      status = #{status,jdbcType=TINYINT},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      last_modified_time = #{lastModifiedTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>